---
title: "homework 5"
output: html_document
params:
  studentName: "趙芊惠"
  studentID: "410673009"
editor_options: 
  chunk_output_type: console
---

# 注意事項

存檔與填寫注意事項：

假設你叫王小明，學號41078392。

  1. 有些同學可能家裡電腦不是utf-8設定，為防萬一，請於存檔時使用：File > save with enconding, 然後選utf-8

  2. 本文檔開始的Frontmatter中，studentID（即key）其value目前為"你的學號"，以上面學號為例則必需改成"41078392"；而studentName（key）其value目前為"你的名字"，以上面名字為例則必需改成"王小明"
  
> 每次作業滿分10分：有寫作業於期限內上傳得3分，剩餘7分依作業準確率決定最後得分多寡，除非該題另有規定。

> 前述存檔與frontmatter要求缺任何一個則扣1分。

請先執以下code chunk, 引入所需packages，答案禁止引用其他套件（Package）。
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); 
```

# 題目

## 1 平均身高  
以下是來自政府開放資料平台的台灣[學生5-16歲身高平均值](https://data.gov.tw/dataset/6283)
```{r data1}
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
```

### 1.1  類別調整
請將「學年度」及「年齡」都改成ordered factor, levels順序以其文字數值從小排到大。( 答案物件studentHeights本身)

```{r ans11}
studentHeights$學年度 <- factor(studentHeights$學年度, ordered = TRUE)
studentHeights$年齡 <- factor(studentHeights$年齡, ordered = TRUE)

levels_year <- levels(studentHeights$學年度)
levels_year <- as.integer(levels_year)
levels_year <- sort(levels_year)

levels_age <- levels(studentHeights$年齡)
levels_age <- as.integer(levels_age)
levels_age <- sort(levels_age)

studentHeights
```

### 1.2 年齡層
請在studentHeights新增「年齡層」元素（class ordered factor），其類別排序為6-8 < 9-12 < 13-15三類年齡層。
```{r ans12}
studentHeights$`年齡層` <- factor(studentHeights$`年齡層`, ordered = TRUE)
level_names <- levels(studentHeights$`年齡層`)
startingAges <- stringr::str_extract(level_names, "^[0-9]+")

startingAges <- as.integer(startingAges)
names(startingAges) <- level_names

sort(startingAges) -> startingAges

studentHeights$`年齡層` <- 
  factor(
    studentHeights$`年齡層`, names(startingAges), ordered = TRUE
  )

levels(studentHeights$`年齡層`)

studentHeights$`年齡層`
```

### 1.3 各年齡層平均身高
請創造一個named numeric vector, averageHeightByGroup (class numeric, length=3) 其值分別是三組年齡層各自所包含年齡下不分性別身高的平均（即第一個值是所有6-8歲不分學年度、不分性別身高（總計身高）的平均，再來是9-12歲，最後是13-15歲），而此vector的元素名稱也分別是"6-8", "9-12", "13-15" (hint: 數值向量x元素平均, 可用mean(x)求得； 這題也考驗同學組合數個「要不要」向量`pick_XXX`)

```{r ans13}
pick_sum <- studentHeights$類別 == "總計"

pick_68 <- studentHeights$年齡層 == "6-8"
picked_average_68 <- studentHeights$平均身高[pick_68 & pick_sum]
average_68 <- mean(picked_average_68)

pick_912 <- studentHeights$年齡層 == "9-12"
picked_average_912 <- studentHeights$平均身高[pick_912 & pick_sum]
average_912 <- mean(picked_average_912)

pick_1315 <- studentHeights$年齡層 == "13-15"
picked_average_1315 <- studentHeights$平均身高[pick_1315 & pick_sum]
average_1315 <- mean(picked_average_1315)

averageHeightByGroup <- c(average_68, average_912, average_1315)
level_names <- levels(studentHeights$`年齡層`)
names(averageHeightByGroup) <- level_names

averageHeightByGroup
```

### 1.4 性別差異
請創造一個named numeric vector, genderDifferenceByAge (class numeric, length=3) 其值分別是三組年齡層各自所包含年齡下的「男性平均」減去「女性平均」（即第一個值是所有6-8歲不分學年度的男女平均差異，再來是9-12歲，最後是13-15歲），而此vector的元素名稱也分別是"6-8", "9-12", "13-15" (hint: 數值向量x元素平均, 可用mean(x)求得)

```{r ans14}
pick_male <- studentHeights$類別 == "男"
pick_female <- studentHeights$類別 == "女"

pick_68 <- studentHeights$年齡層 == "6-8"
picked_68_male <- studentHeights$平均身高[pick_68 & pick_male]
picked_68_female <- studentHeights$平均身高[pick_68 & pick_female]
difference_68 <- picked_68_male - picked_68_female
average_difference_68 <- mean(difference_68)

pick_912 <- studentHeights$年齡層 == "9-12"
picked_912_male <- studentHeights$平均身高[pick_912 & pick_male]
picked_912_female <- studentHeights$平均身高[pick_912 & pick_female]
difference_912 <- picked_912_male - picked_912_female
average_difference_912 <- mean(difference_912)

pick_1315 <- studentHeights$年齡層 == "13-15"
picked_1315_male <- studentHeights$平均身高[pick_1315 & pick_male]
picked_1315_female <- studentHeights$平均身高[pick_1315 & pick_female]
difference_1315 <- picked_1315_male - picked_1315_female
average_difference_1315 <- mean(difference_1315)


heightDifferenceByGroup <- c(average_difference_68, average_difference_912, average_difference_1315)
level_names <- levels(studentHeights$`年齡層`)
names(heightDifferenceByGroup) <- level_names

heightDifferenceByGroup
```


## 2 各學系

```{r data2}
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
```

### 2.1 改系名
請寫下「一個」字串的regex字串向量，稱之為realEstateRegex （class character, length=1）,

```{r ans21}
realEstateRegex <- "不動(產?)(與?)(城?)(鄉?)(環?)(境?)(學?)系"

realEstateRegex
```

使得執行以下程序後differentMajors裡屬「不動產與城鄉環境學系（不管何種寫法）」的都會變成"不動系"。這裡regex還有一個限制考驗，就是：「不動產與城鄉環境學系」的十個字都只會出現一次（所以不能寫"(不動系|不動產系|...)"之類的——不、動、系三字出現二次，違規）。(hint: 這題使用regex quantifier裡的`?`會容易很多)
```{r}
str_replace(differentMajors,realEstateRegex,"不動系")
```



### 2.2 factor levels
直接將differentMajors轉成factor, 並將它的levels存在currentLevels（class character）。（雖然同系有不同叫法而形成好幾個levels，這題不用去整併它。）
```{r ans22}
differentMajors <- factor(differentMajors)

currentLevels <- levels(differentMajors) 

currentLevels
```


### 2.3 商學院
請寫下「一個」字串的regex（class character, length=1）稱之為bSchoolRegex,

```{r ans23}
bSchoolRegex <- "休運系|休閒與運動管理學系|金融系|金融與合作經營學系|金融與合作學系"

bSchoolRegex
```

使得執行以下程序後currentLevels裡屬商學院的系都會變成"商學院"。（其實此題也可以要求第一題的限制，但怕難度太高這題則不設「系名字元不重覆」的限制）
```{r}
str_replace(currentLevels,bSchoolRegex,"商學院")
```



### 2.4 改所有系名
請統一differentMajors裡的系名如下：
  休運系，金融系，經濟系，社會系，社工系，公行系，不動系
  
這題不限方法或regex使用次數。（答案物件differentMajors本身, class factor）
```{r ans24}
real_LSMRegex <- "休運系|休閒與運動管理學系"
real_FainanceRegex <- "金融系|金融與合作經營學系|金融與合作學系"
real_EconRegex <- "經濟(學?)系"
real_SocRegex <- "社會(學?)系"
real_SWRegex <- "社(會?)工(作?)(學?)系"
real_PARegex <- "公(共?)行(政?)(暨?)(政?)(策?)(學?)系"
real_EstateRegex <- "不動(產?)(與?)(城?)(鄉?)(環?)(境?)(學?)系"

differentMajors <- str_replace(differentMajors, real_LSMRegex, "休運系")
differentMajors <- str_replace(differentMajors, real_FainanceRegex, "金融系")
differentMajors <- str_replace(differentMajors, real_EconRegex, "經濟系")
differentMajors <- str_replace(differentMajors, real_SocRegex, "社會系")
differentMajors <- str_replace(differentMajors, real_SWRegex, "社工系")
differentMajors <- str_replace(differentMajors, real_PARegex, "公行系")
differentMajors <- str_replace(differentMajors, real_EstateRegex, "不動系")

differentMajors
```


### 2.5 學院factor
另創一個school物件（class factor），它的每個元素對應differentMajors學系所屬之學院：

  * 商學院：包含休運系，金融系
  
  * 社科院：包含經濟系，社會系，社工系
  
  * 公共事務學院： 包含公行系，不動系

即levels(school)會有「公共事務學院、商學院、社科院」。

```{r ans25}
differentMajors <- factor(differentMajors)
currentLevels <- levels(differentMajors) 

busiSchoolRegex <- "休運系|金融系"
socSchoolRegex <- "經濟系|社會系|社工系"
pSchoolRegex <- "公行系|不動系"
currentLevels <- str_replace(currentLevels,bSchoolRegex,"商學院")
currentLevels <- str_replace(currentLevels,socSchoolRegex,"社科院")
currentLevels <- str_replace(currentLevels,pSchoolRegex,"公共事務學院")

school <- factor(differentMajors)
levels(school) <- currentLevels
school
```

